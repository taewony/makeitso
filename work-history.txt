------------- 9/10일 
오후 4시부터 Kiro 사용 시작, 실제 문서 작성 및 구현 작업 (AI kiro 협업 기준):
1.1-1.2: 데이터 모델 + 로컬 데이터 소스 (1시간)
2.1-2.2: Repository + 온보딩 UI (1.5시간)
3.1: 설정 화면 확장 (1시간)
4.1-4.2: AI 서비스 + 응답 템플릿 (30분)

✅ Phase 1 구현 완료!
완료된 기능들:
1. 데이터 모델 및 로컬 저장소 ✅
AiCharacter: 3가지 AI 캐릭터 (욕쟁이, 잔소리 여친, 냉혹한 공주)
UserGoals: 단기/장기 목표 관리
UserProfile: 사용자 프로필 (목표 + 캐릭터 + 온보딩 상태)
AiMessage: AI 응답 메시지 저장
Deadline: TODO 마감기한 (24시간/1주일)
로컬 데이터 소스: SharedPreferences + 메모리 기반 저장
2. 온보딩 시스템 ✅
OnboardingScreen: 목표 입력 + AI 캐릭터 선택
자동 리다이렉션: 미완료 시 온보딩 화면으로 이동
완료 후 메인 화면 이동
3. 설정 화면 확장 ✅
목표 수정: 단기/장기 목표 편집 다이얼로그
AI 캐릭터 변경: 3가지 캐릭터 선택 다이얼로그
과거 기록 보기: 표시 옵션 설정 다이얼로그
기존 기능 유지: 로그아웃/계정삭제
4. AI 응답 시스템 ✅
AiPromptService: 캐릭터별 응답 생성
상황별 응답: 미완료/마감지남/완료 개수에 따른 다른 메시지
3가지 캐릭터 톤: 각각 고유한 말투와 스타일
AI Nudge 버튼: 실제 AI 응답 표시

🔍 테스트해야 할 UI 동작
1. 첫 실행 시 온보딩
앱 첫 실행 → 자동으로 온보딩 화면 표시
목표 2개 입력 + AI 캐릭터 선택
완료 후 메인 화면으로 이동
2. 설정 화면 (우측 상단 톱니바퀴)
"목표 수정" → 기존 목표 편집 가능
"AI 캐릭터 변경" → 3가지 중 선택
"과거 기록 보기" → 옵션 체크박스
3. AI Nudge (메인 화면 우측 하단)
버튼 클릭 → 선택된 캐릭터의 잔소리 표시
캐릭터별 다른 톤앤매너
TODO 상태에 따른 다른 메시지
4. 데이터 지속성
앱 재시작 후에도 설정 유지
로그아웃 시 데이터 초기화
모든 Phase 1 기능이 구현 완료되었습니다! 🎉

🔄 새로운 사용자 플로우:
앱 첫 실행 → TodoListScreen 로드
인증 체크 → 로그인되지 않음 감지
SignUp 화면으로 이동 → 회원가입 진행
회원가입 완료 → 온보딩 화면으로 이동
온보딩 완료 → 메인 TodoList 화면으로 이동
🔄 기존 사용자 플로우:
앱 실행 → TodoListScreen 로드
인증 체크 → 로그인됨 확인
온보딩 체크 → 완료되었으면 메인 화면, 미완료면 온보딩 화면
📱 이제 테스트해야 할 시나리오:
1. 첫 사용자 (Clean Install)
앱 실행 → 자동으로 SignUp 화면 표시
회원가입 완료 → 온보딩 화면 표시
목표 + 캐릭터 설정 → 메인 화면 표시
2. 기존 사용자 (온보딩 미완료)
로그인 → 온보딩 화면 표시
설정 완료 → 메인 화면 표시
3. 기존 사용자 (온보딩 완료)
로그인 → 바로 메인 화면 표시
4. AI Nudge 기능
메인 화면 우측 하단 "AI Nudge" 버튼 클릭
설정된 캐릭터의 잔소리 메시지 표시
5. 설정 기능
우측 상단 톱니바퀴 → 목표 수정, 캐릭터 변경, 과거 기록 보기

----------------------------------

다음 단계인 Phase 2 (Firebase + LLM 연동)로 넘어가거나, 현재 기능들을 테스트해보시면 됩니다. -> 이건 실행 안함.

5.1-5.2: TODO 확장 + 자동 트리거 (1시간)
6.1-6.2: AI 모달 + 히스토리 (1시간)
7.1-7.2: 세션 관리 + 온보딩 검증 (1시간)
8.1-8.2: 통합 테스트 + 최적화 (1시간)

----------------------------------------------
9/11 개발 단계 하나 추가로 spec 및 design 문서 추가 작업 진행

✅ Spec 및 Design 문서 수정 완료!
📋 주요 변경사항
Requirements.md 업데이트:
개발 단계 3단계로 확장 (Phase 1 → Phase 2 → Phase 3)
Phase 2 새로운 요구사항 5개 추가:
Requirement 6: 자동 AI Nudge 및 TODO 연동
Requirement 7: 과거 AI 메시지 기록 관리
Requirement 8: 프롬프트 보기 및 복사 기능
Requirement 9: 개선된 프롬프트 생성 시스템
Requirement 10: 로그인 상태 지속성 개선
Design.md 업데이트:
Phase 2 아키텍처 컴포넌트 추가:
MessageHistoryScreen
SessionManager 서비스
개선된 프롬프트 생성 로직
새로운 데이터 모델 정의:
LoginSession
MessageHistoryItem
Phase 2 테스트 전략 추가
🎯 Phase 2 구현 준비 완료
이제 spec 문서가 Phase 2 요구사항을 반영하여 업데이트되었습니다. DB migration 없이도 SharedPreferences와 메모리를 활용한 개선된 기능들을 구현할 수 있는 설계가 완성되었습니다.

-----

README.md 재정비 완료!
📋 주요 변경사항
기존 "## [부록] Spec Driven Development Process (with Kiro)" 섹션을 완전히 재작성:
🚀 스타트업을 위한 AI 기반 MVP 개발 방법론

창업 아이디어의 빠른 검증과 구현에 초점
Document-Driven AI Collaboration 철학 제시
📋 3계층 개발 프로세스

Layer 1: 제품 의도 정의 (AGENT.md + README.md)
Layer 2: 기능 명세 작성 (.kiro/specs/)
Layer 3: 점진적 구현 (Source Code)
🛠️ 지원 기술 스택

웹: Next.js + Tailwind CSS + Supabase
모바일: Jetpack Compose + Firebase/FastAPI
🔄 개발 워크플로우

Phase 1: 아이디어 검증 (1-2주)
Phase 2: 설계 및 명세 (1주)
Phase 3: 점진적 개발 (2-4주)
🤖 AI 협업 모범 사례

효과적인 프롬프팅 가이드
문서 기반 컨텍스트 관리
점진적 복잡도 증가 전략
🔄 기존 코드베이스에서 Spec Driven Development 적용하기 (새로 추가)

Reverse Engineering 프로세스
현재 상태 문서화 방법
점진적 개선 전략
AI를 활용한 코드 분석 및 문서 생성
🎯 핵심 개선점
창업 친화적 접근: NextJS + Supabase, Compose + Firebase 조합으로 빠른 MVP 개발 지원
실용적 가이드: 이론보다는 실제 적용 가능한 구체적인 방법론 제시
AI 협업 중심: AI를 단순한 도구가 아닌 개발 파트너로 활용하는 방법
기존 프로젝트 고려: 처음부터 시작하는 프로젝트뿐만 아니라 기존 코드베이스 개선 방법도 포함
이제 README.md가 창업을 준비하는 개발자들이 AI와 협업하여 빠르게 MVP를 개발할 수 있는 실용적인 가이드로 완성되었습니다! 🚀

---------------------------------------------------------
📋 Phase 2 변경 작업 정리

✅ 완료된 작업들
1. Room Database 의존성 추가
app/build.gradle.kts: Room 라이브러리 추가
gradle/libs.versions.toml: Room 버전 정의 (2.6.1)
2. Room Entity 클래스 생성
UserProfileEntity.kt: 사용자 프로필 + 세션 관리 (4주 만료)
TodoItemEntity.kt: TODO 항목 + 마감기한
AiMessageEntity.kt: AI 메시지 히스토리
3. Room DAO 인터페이스 생성
UserProfileDao.kt: 사용자 프로필 CRUD + 세션 체크
TodoItemDao.kt: TODO 항목 CRUD + 상태별 조회
AiMessageDao.kt: AI 메시지 CRUD + 타입/캐릭터별 조회
4. Room Database 클래스
AppDatabase.kt: 3개 Entity 통합 관리, 버전 1
5. 데이터 매퍼 클래스
UserProfileMapper.kt: Entity ↔ Domain 변환 + 세션 유효성 체크
TodoItemMapper.kt: Entity ↔ Domain 변환 + Date 처리
AiMessageMapper.kt: Entity ↔ Domain 변환 + Enum 처리
6. DataSource 마이그레이션
UserProfileLocalDataSource.kt: SharedPreferences → Room DB 교체
AiAssistantLocalDataSource.kt: In-Memory → Room DB 교체
7. Hilt 의존성 주입 업데이트
LocalDataModule.kt: Room Database, DAO 의존성 추가
8. Repository 인터페이스 확장
UserProfileRepository.kt: 세션 관리, 다중 사용자 지원 메서드 추가

🔄 주요 변경점
데이터 지속성 개선
Before: SharedPreferences + In-Memory
After:  SQLite (Room) + 백업용 SharedPreferences
세션 관리 강화
Before: 단순 boolean 플래그
After:  타임스탬프 기반 4주 세션 만료 체크
AI 메시지 히스토리
Before: 앱 재시작 시 데이터 손실
After:  영구 저장, 캐릭터/타입별 조회 가능
복잡한 쿼리 지원
Before: 단순 리스트 필터링
After:  SQL 기반 복잡한 조건 검색

🚧 아직 해야 할 작업들
1. 기존 Repository 업데이트
AiAssistantRepository.kt Room 연동
TodoItemRepository.kt Room 연동 (기존 Firebase → Room 하이브리드)
2. ViewModel 업데이트
세션 만료 체크 로직 추가
데이터 플로우 변경 반영
3. 컴파일 오류 수정
변경된 인터페이스에 맞춰 호출부 수정
누락된 import 추가
4. 테스트 및 검증
데이터 마이그레이션 테스트
UI 동작 확인

-----

완료된 작업 요약
1. Repository 계층 업데이트
TodoItemRepository: getAllTodoItems(userId: String) 메서드 추가하여 AI 응답 생성 시 현재 TODO 아이템들을 가져올 수 있도록 함
TodoItemRemoteDataSource: getAllTodoItems(userId: String) 메서드 구현 (Phase 1에서는 메모리 기반)
UserProfileRepository: 이미 완전히 구현됨 ✅
AiAssistantRepository: 이미 완전히 구현됨 ✅
2. ViewModel 계층 업데이트
TodoListViewModel: onNudgeButtonClick() 메서드 개선하여 실제 TODO 아이템들을 AI 응답 생성에 사용하도록 수정
OnboardingViewModel: AI 비서 설정을 위한 완전한 온보딩 플로우 구현 ✅
SettingsViewModel: 목표 수정, AI 캐릭터 변경, 과거 기록 보기 기능 완전 구현 ✅
3. 서비스 계층 확인
AiPromptService: 캐릭터별 프롬프트 생성 및 미리 정의된 응답 시스템 완전 구현 ✅
4. UI 구현 확인
OnboardingScreen: 목표 설정 및 AI 캐릭터 선택 UI 완전 구현 ✅
SettingsScreen: 확장된 설정 화면 (목표 수정, 캐릭터 변경, 과거 기록 보기) 완전 구현 ✅
5. 완료된 태스크
✅ Task 1.2: 로컬 데이터 소스 구현
✅ Task 2.2: 온보딩 화면 UI 구현
✅ Task 4.1: AiPromptService 구현
이제 Repository와 ViewModel 업데이트가 완료되어 AI 비서 기능의 핵심 데이터 관리 및 상태 관리 로직이 모두 구현되었습니다. 다음 단계로는 Task 3.1 (설정 화면 UI 확장) 또는 Task 5.1 (TodoItem 모델 확장 및 UI 업데이트) 등을 진행할 수 있습니다.

Phase 2 구현 완료.
- 로컬 데이터 지속성 개선 (SharedPreferences 활용)
- TODO 추가 시 자동 AI Nudge 기능
- 과거 AI 메시지 기록 보기 화면 추가
- 프롬프트 보기 및 복사 기능
- 개선된 프롬프트 생성 시스템

--------------------
이제 UI 테스트 하면서 local DB에서 동작하는 Maieitso 앱 동작을 수동으로 테스트하며, 기능 개선 작업을 진행하니다.
